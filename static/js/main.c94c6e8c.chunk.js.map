{"version":3,"sources":["components/Image/image.js","components/Wrapper/wrapper.js","App.js","index.js"],"names":["Image","props","react_default","a","createElement","className","onClick","guess","id","src","link","alt","Wrapper","score","message","children","guesses","App","state","images","push","i","length","_this","setState","console","log","shuffle","imagesArray","j","Math","floor","random","_ref","_this2","this","wrapper","map","image","Image_image","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"giCAWeA,MARf,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,MAAMN,EAAMO,KAAKC,IAAKR,EAAMS,KAAMC,IAAI,6BCYzDC,MAff,SAAiBX,GACf,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,kCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMY,OACvBX,EAAAC,EAAAC,cAAA,SAAIH,EAAMa,SACVZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBJ,EAAMc,oBCNhDC,SAAU,IAkECC,6MA/DbC,MAAO,CACLC,SACAN,MAAO,EACPC,QAAS,0EAGXP,MAAQ,SAAAC,GAENQ,EAAQI,KAAKZ,GAGb,IAAK,IAAIa,EAAI,EAAGA,EAAIL,EAAQM,OAAQD,IAAI,CAEtC,GAAIb,IAAOQ,EAAQK,EAAE,GAMnB,OALAL,EAAU,QACVO,EAAKC,SAAS,CACZX,MAAO,EACPC,QAAS,uBAGFS,EAAKL,MAAML,OAAS,GAC7BU,EAAKC,SAAS,CACZX,MAAOU,EAAKL,MAAML,MAAQ,EAC1BC,QAAS,gBAGXS,EAAKC,SAAS,CACZX,MAAO,EACPC,QAAS,aAIfW,QAAQC,IAAIH,EAAKL,MAAML,OACvBU,EAAKI,QAAQR,MAGfQ,QAAU,SAAAC,GACR,IAAK,IAAIP,EAAIO,EAAYN,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAMQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAI,IADGY,EAEV,CAACL,EAAYC,GAAID,EAAYP,IAA/DO,EAAYP,GAFgCY,EAAA,GAE5BL,EAAYC,GAFgBI,EAAA,GAIjD,OAAOL,2EAGD,IAAAM,EAAAC,KACN,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,CACAvB,MAAOsB,KAAKjB,MAAML,MAClBC,QAASqB,KAAKjB,MAAMJ,SAEjBqB,KAAKjB,MAAMC,OAAOkB,IAAI,SAAAC,GAAK,OAC1BpC,EAAAC,EAAAC,cAACmC,EAAD,CACA/B,GAAI8B,EAAM9B,GACVgC,IAAKF,EAAM9B,GACXE,KAAM4B,EAAM5B,KACZH,MAAO2B,EAAK3B,kBAxDJkC,aCFlBC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c94c6e8c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Image(props) {\n  return (\n    <div className=\"col-md-3 img-div\">  \n        <img onClick={() => props.guess(props.id)} src={props.link} alt=\"Memory Game Card\" />\n    </div>    \n  );\n}\n\nexport default Image;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div>\n        <div className=\"header\">\n            <h1>Remember That Flag!</h1>\n        </div>\n        <div className=\"container\">\n            <h2>Your Score: {props.score}</h2>\n            <p>{props.message}</p>\n            <div className=\"row text-center\">{props.children}</div>\n        </div>\n    </div> \n  );\n}\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Image from \"./components/Image/image\";\nimport Wrapper from \"./components/Wrapper/wrapper\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nlet guesses = [];\n\nclass App extends Component {\n  state= {\n    images,\n    score: 0,\n    message: \"Click a flag to begin. When you get 12 correct in a row, you've won!\"\n  };\n\n  guess = id => {\n    // push the id into an array\n    guesses.push(id);\n    \n    // check to see if it's already in the array\n    for (var i = 0; i < guesses.length; i++){\n      // if it is, reset score to 0 and alert the player that they lost\n      if (id === guesses[i-1]){\n        guesses = [];\n        this.setState({\n          score: 0,\n          message: \"Sorry, you lost...\"\n        });\n        return;\n      } else if (this.state.score <= 11){\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Nice guess!\"\n        });\n      } else {\n        this.setState({\n          score: 0,\n          message: \"You won!\"\n        });\n      }\n    }  \n    console.log(this.state.score);\n    this.shuffle(images);\n  };\n\n  shuffle = imagesArray => {\n    for (let i = imagesArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [imagesArray[i], imagesArray[j]] = [imagesArray[j], imagesArray[i]];\n    }\n    return imagesArray;\n  };\n\n  render(){\n    return (\n      <Wrapper\n      score={this.state.score}\n      message={this.state.message}\n      >\n        {this.state.images.map(image => (\n          <Image\n          id={image.id}\n          key={image.id}\n          link={image.link}\n          guess={this.guess}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}